{"version":3,"sources":["views/shapes/About.jsx","components/Modal.jsx","views/layout/Header.jsx","views/layout/Footer.jsx","views/layout/Layout.jsx","model/Point.js","views/shapes/DisplayCoordirnates.jsx","components/Parallelogram.jsx","utils/shapeUtils.js","constants/actionTypes.js","actions/shapeAction.js","services/shapeService.js","components/PointCircle.jsx","views/shapes/DrawShapes.jsx","views/shapes/Container.jsx","reducers/shapeReducer.js","views/shapes/DrawParallelogram.jsx","App.jsx","index.js"],"names":["Modal","title","WrappedComponent","myprops","modalRef","useRef","console","log","useEffect","dialogPolyfill","registerDialog","current","defineModal","react_default","a","createElement","id","ref","className","type","onClick","close","href","Header","_React$useState","React","useState","_React$useState2","Object","slicedToArray","modal","setModal","event","showModal","preventDefault","value","shapes_About","Footer","Layout","_ref","children","count","Fragment","layout_Header","layout_Footer","connect","state","Point","x","arguments","length","undefined","y","classCallCheck","this","DisplayCoordinates","pointsSet","circleRadius","parallelogramArea","listOfPoints","Array","from","concat","toConsumableArray","map","point","index","key","parseInt","Parallelogram","linePoints","_ref$color","color","_ref$point","ReactKonva","points","closed","stroke","getParallelogramCenter","p1","p2","p3","p4","_intersectionLines","intersectionLines","straightExpression","_intersectionLines2","drawCircumference","_straightExpression","b","_perpendicularStraigh","perpendicularStraight","_perpendicularStraigh2","_intersectionLines3","_intersectionLines4","area","calculateDistanceBetweenPoints","radius","Math","sqrt","PI","pow","d1","d2","getPrevId","getNextId","coefficient","constantFunction","generateFourthPoint","_ref2","x4","y4","c","actionCreation","insertPoint","payload","updatePoint","newPoint","setCircleCenter","setAreaRadius","resetShapes","updateVert","thirdPointId","pointNewPosition","prevPointPosition","inverse","fourthId","shapeStore","getState","thirdUpperPoint","upperStraightOne","upperStraigthTwo","newThirdPoint","construct","dispatch","PointCircle","draggable","fill","_ref$shadowBlur","shadowBlur","_ref$shadowOpacity","shadowOpacity","_ref$shadowColor","shadowColor","circleProperties","objectSpread","onDragStart","target","setAttrs","shadowOffset","scaleX","scaleY","onDragEnd","to","duration","easing","Konva","Easings","ElasticEaseOut","shadowOffsetX","shadowOffsetY","onDragMove","_event$evt","evt","neoX","neoY","upperPointId","beneathPointId","_drawCircumference","newCenter","apply","shapeService","layerX","layerY","DrawShapes","circleCenter","_pointsSet","result","Error","termoConst","validateParallelogram","error","alert","message","_generateParallelogra","generateParallelogram","_generateParallelogra2","pontoIntersecao","components_PointCircle","updateCoords","call","components_Parallelogram","Container","style","float","width","window","innerWidth","height","innerHeight","currentTarget","pointerPos","text","fontSize","shapes_DrawShapes","initialState","Component","reducer","neoPointSet","flatMap","pointForUpdate","pointSetUpdated","updatedCoord","push","store","createStore","App","es","layout_Layout","shapes_DisplayCoordirnates","shapes_Container","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.f5ff0ddb.chunk.js","sourcesContent":["import React from \"react\";\nimport Modal from \"../../components/Modal\";\n\nconst About = () => (\n  <p>\n    This application was developed by <strong>Daniel Mascena</strong>. His\n    purpose is to use the user inputs, three choosed (clicked) points, on a{\" \"}\n    <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API\">\n      HTML5 2D Canvas\n    </a>{\" \"}\n    to draw geometrical shapes: one{\" \"}\n    <a href=\"https://en.wikipedia.org/wiki/Parallelogram\">Parallelogram</a> and\n    a inner <a href=\"https://en.wikipedia.org/wiki/Circle\">Circle</a> with the\n    same center. To build this application I use the follow stack:{\" \"}\n    <a href=\"https://reactjs.org/\">ReactJS</a> UI Component library,{\" \"}\n    <a href=\"https://github.com/konvajs/react-konva\">React Konva</a> for an\n    easily integration between React and Canvas API, and for the last,{\" \"}\n    <a href=\"https://redux.js.org/\">Redux.js</a>,{\" \"}\n    <i>\n      the most popular implementation of the Flux Pattern for State Management\n    </i>\n    , for serving as a state container for JavaScript apps.\n  </p>\n);\n\nexport default Modal(\"About\")(About);\n","import React, { useEffect, useRef, Children } from \"react\";\nimport dialogPolyfill from \"dialog-polyfill\";\nimport \"./modal.css\";\nconst Modal = title => WrappedComponent => {\n  return myprops => {\n    const modalRef = useRef(null);\n    console.log(\"wrapper \", myprops);\n    useEffect(() => {\n      //var dialog = document.querySelector(\"dialog\");\n      dialogPolyfill.registerDialog(modalRef.current);\n      myprops.defineModal(modalRef);\n    }, []);\n    return (\n      <dialog id=\"about\" ref={modalRef}>\n        <h2 className=\"modal-heading\">\n          <span className=\"modal-heading__text\">{title}</span>\n        </h2>\n        <div className=\"modal-content\">\n          <WrappedComponent />\n        </div>\n        <button\n          type=\"button\"\n          className=\"shapes-btn modal-btn__close\"\n          onClick={() => modalRef.current.close()}\n        >\n          Close\n        </button>\n      </dialog>\n    );\n  };\n};\n\nexport default Modal;\n","import React from \"react\";\nimport About from \"../shapes/About\";\nimport \"./header.css\";\n\nconst Header = () => {\n  const [modal, setModal] = React.useState(null);\n\n  return (\n    <header>\n      <h1 className=\"brand-title\">\n        <span className=\"brand-title__text\">Shapes</span>\n      </h1>\n      <nav>\n        <input\n          className=\"open-modal-btn\"\n          type=\"button\"\n          onClick={event => {\n            modal.current.showModal();\n            event.preventDefault();\n          }}\n          value=\"About\"\n        />\n      </nav>\n      <aside>\n        <About defineModal={setModal} />\n      </aside>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./footer.css\";\n\nconst Footer = () => <footer>&copy; C/MIND 2020</footer>;\n\nexport default Footer;\n","import React from \"react\";\n\nimport { connect } from \"react-redux\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nconst mapStateToProps = state => ({\n  count: state.count\n});\nlet Layout = ({ children, count }) => {\n  return (\n    <React.Fragment>\n      <Header />\n      {children}\n      <Footer />\n    </React.Fragment>\n  );\n};\n\nLayout = connect(mapStateToProps)(Layout);\n\nexport default Layout;\n","export default class Point {\n    constructor(\n        x = 0,\n        y = 0,\n        id = 0\n    ) {\n        this.x = x;\n        this.y = y;\n        this.id = id;\n    }\n}","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport \"./DisplayCoordirnates.css\";\nimport Point from \"../../model/Point\";\n\nconst mapStateToProps = state => ({\n  pointsSet: state.pointsSet,\n  circleRadius: state.circleRadius,\n  parallelogramArea: state.parallelogramArea\n});\nlet DisplayCoordinates = ({ pointsSet, circleRadius, parallelogramArea }) => {\n  const listOfPoints = Array.from(new Array(4 - pointsSet.length));\n  return (\n    <aside className=\"coordinates-container\">\n      <h3>Coordinates</h3>\n      <div className=\"coordinates-content\">\n        <ul>\n          {[...pointsSet, ...listOfPoints].map((point = new Point(), index) => (\n            <li key={index}>{`Point ${index + 1}: ${parseInt(\n              point.x,\n              10\n            )} ${parseInt(point.y, 10)}`}</li>\n          ))}\n        </ul>\n        <ul>\n          <li>Parallelogram area: {parseInt(parallelogramArea, 10)}</li>\n          <li>Circle radius: {parseInt(circleRadius, 10)}</li>\n        </ul>\n      </div>\n    </aside>\n  );\n};\n\nDisplayCoordinates = connect(mapStateToProps)(DisplayCoordinates);\nexport default DisplayCoordinates;\n","import React from \"react\";\nimport { Line } from \"react-konva\";\nimport Point from \"../model/Point\";\n\nconst Parallelogram = ({ linePoints, color = \"blue\", point = new Point() }) => (\n  <Line x={point.x} y={point.y} points={linePoints} closed stroke={color} />\n);\nexport default Parallelogram;\n","import Point from \"../model/Point\";\n\n/**\n *\n * @param {Array} pointsSet\n * @returns {Array} fourth point and the intersection point\n */\nexport function generateParallelogram(pointsSet) {\n    // infer the 4th point through the projection of the parallel lines\n    const p4 = generateFourthPoint(pointsSet);\n    const intersectionPoint = getParallelogramCenter(...pointsSet, p4);\n    return [p4, intersectionPoint];\n}\n/**\n * Find the center of parallelogram by the intersection (crossing) of his diagonals\n * @param {Array} pointsSet\n * @param {Point} p4\n * @returns {Point} the intersection point of parallelogram\n */\nexport function getParallelogramCenter(p1, p2, p3, p4) {\n    // p1 -> p3 = first diagonal\n    const d1 = straightExpression(p1, p3);\n    // p2 -> p4 = second diagonal\n    const d2 = straightExpression(p2, p4);\n    // parallelogram center\n    const [x, y] = intersectionLines(d1, d2);\n    // intersection point\n    return new Point(x, y);\n}\n\n/**\n *\n * @param {Point} p1\n * @param {Point} p2\n * @param {Point} p3\n * @returns {number, number} the parallelogram area and the circle radius\n */\nexport function drawCircumference(p1, p2, p3) {\n    const {\n        a,\n        b\n    } = straightExpression(p1, p2);\n    const [ap, bp] = perpendicularStraight(a, b, p3.x, p3.y);\n    const [x, y] = intersectionLines({\n        a,\n        b\n    }, {\n        a: ap,\n        b: bp\n    });\n    const h = calculateDistanceBetweenPoints(p3, {\n        x,\n        y\n    });\n    const base = calculateDistanceBetweenPoints(p1, p2);\n    const area = h * base;\n    const radius = Math.sqrt(area / Math.PI);\n    return {\n        area,\n        radius\n    };\n}\n\n/**\n *\n * @param {Point} p1\n * @param {Point} p2\n * @returns {number}\n */\nexport function calculateDistanceBetweenPoints(p1, p2) {\n    return Math.sqrt(Math.pow(p2.y - p1.y, 2) + Math.pow(p2.x - p1.x, 2));\n}\n\n/**\n *\n * @param {number} a - straight angular coefficient\n * @param {number} b -\n * @param {number} x - coordenate x\n * @param {number} y - coordenate y\n * @returns {Array}\n */\nexport function perpendicularStraight(a, b, x, y) {\n    const coefAngular = -1 / a;\n    const constant = y + x / a;\n    return [coefAngular, constant];\n}\n\n/**\n *\n * @param {Object} d1 - first diagonal\n * @param {Object} d2 - second diagonal\n * @returns {Array} coordenates of the crossing point\n */\nexport function intersectionLines(d1, d2) {\n    const x = (d2.b - d1.b) / (d1.a - d2.a);\n    const y = d1.a * x + d1.b;\n    return [x, y];\n}\n\n/**\n *\n * @param {number} id - target point id\n * @returns {number} the previous point position\n */\nexport function getPrevId(id) {\n    return id === 1 ? 4 : id - 1;\n}\n\n/**\n *\n * @param {number} id - target point id\n * @returns {number} the next point position\n */\nexport function getNextId(id) {\n    return id < 4 ? id + 1 : 1;\n}\n\n/**\n *\n * @param {Point} p1\n * @param {Point} p2\n * @returns {Object} the angular coefficient\n */\nexport function straightExpression(p1, p2) {\n    const a = coefficient(p1, p2);\n    const b = constantFunction(p1.x, p1.y, a);\n    return {\n        a,\n        b\n    };\n}\n\n/**\n *\n * @param {Point[]} param0 - list of Points\n */\nexport function generateFourthPoint([p1, p2, p3]) {\n    const x4 = p3.x - p2.x + p1.x;\n    const y4 = p3.y - p2.y + p1.y;\n    const fourthPoint = new Point(x4, y4, p3.id + 1);\n    return fourthPoint;\n}\n\n/**\n *\n * @param {number} x - coordenate x\n * @param {number} y - coordenate y\n * @param {number} c - coefficient\n * @returns {number} straight expression constant\n */\nexport function constantFunction(x, y, c) {\n    return y - c * x;\n}\n\n/**\n *\n * @param {Point} p1\n * @param {Point} p2\n */\nexport function coefficient(p1, p2) {\n    if (p1.x !== p2.x) {\n        return (p2.y - p1.y) / (p2.x - p1.x);\n    } else {\n        return null;\n    }\n}","export const CALCULATE_DIFFERENCES_BETWEEN_POINTS = \"CALCULATE_DIFFERENCES_BETWEEN_POINTS\";\n\nexport const LINE_EXPRESSION = \"LINE_EXPRESSION\";\n\nexport const ADDING_POINT = \"ADDING_POINT\";\n\nexport const UPDATING_POINT = \"UPDATING_POINT\";\n\nexport const SET_CIRCLE_CENTER = \"SET_CIRCLE_CENTER\";\n\nexport const SET_AREA_RADIUS = \"SET_AREA_RADIUS\";\n\nexport const RESET_SHAPES = \"RESET_SHAPES\";","import * as types from \"../constants/actionTypes\";\n\nconst actionCreation = {\n    insertPoint({\n        x,\n        y\n    }) {\n        return {\n            type: types.ADDING_POINT,\n            payload: {\n                x,\n                y\n            }\n        }\n    },\n    updatePoint(newPoint) {\n        return {\n            type: types.UPDATING_POINT,\n            payload: {\n                newPoint\n            }\n        }\n    },\n    setCircleCenter({\n        x,\n        y\n    }) {\n        return {\n            type: types.SET_CIRCLE_CENTER,\n            payload: {\n                x,\n                y\n            }\n        }\n    },\n    setAreaRadius(area, radius) {\n        return {\n            type: types.SET_AREA_RADIUS,\n            payload: {\n                area,\n                radius\n            }\n        }\n    },\n    resetShapes() {\n        return {\n            type: types.RESET_SHAPES,\n\n        }\n    }\n}\nexport default actionCreation;","import {\n    store as shapeStore\n} from \"../App.jsx\";\nimport {\n    generateFourthPoint,\n    straightExpression,\n    intersectionLines,\n    getPrevId,\n    coefficient,\n    constantFunction,\n    getNextId,\n    drawCircumference,\n    getParallelogramCenter\n} from \"../utils/shapeUtils\";\nimport actionCreation from \"../actions/shapeAction\";\nimport Point from \"../model/Point.js\";\n\n/**\n *\n * @param {neoX, neoY, previousPointId, nextPointId, point} newCoords\n */\nexport function updateParallelogram(neoX, neoY, prevPointPosition) {\n    const state = shapeStore.getState();\n    const pointNewPosition = new Point(neoX, neoY, prevPointPosition.id);\n    const upperPointId = getPrevId(prevPointPosition.id);\n    const beneathPointId = getNextId(prevPointPosition.id);\n\n    shapeStore.dispatch(actionCreation.updatePoint(pointNewPosition));\n    const upperPoint = updateVert(\n        upperPointId,\n        pointNewPosition,\n        prevPointPosition,\n        false\n    );\n    const beneathPoint = updateVert(\n        beneathPointId,\n        pointNewPosition,\n        prevPointPosition,\n        true\n    );\n    const {\n        area,\n        radius\n    } = drawCircumference(\n        pointNewPosition,\n        upperPoint,\n        beneathPoint\n    );\n    shapeStore.dispatch(actionCreation.setAreaRadius(area, radius));\n\n    const newCenter = getParallelogramCenter(...state.pointsSet);\n    shapeStore.dispatch(actionCreation.setCircleCenter(newCenter));\n}\n\n/**\n *\n * @param {Point} thirdPointId\n * @param {Point} pointNewPosition\n * @param {*} prevPointPosition\n * @param {boolean} inverse - true for clock direction\n */\nexport function updateVert(\n    thirdPointId,\n    pointNewPosition,\n    prevPointPosition,\n    inverse\n) {\n    // Getting the previous ID to build a virtual parallelogram\n    const state = shapeStore.getState();\n    const thirdUpperPoint = state.pointsSet[thirdPointId - 1];\n\n    const upperFourthPoint = generateFourthPoint([\n        pointNewPosition,\n        prevPointPosition,\n        thirdUpperPoint\n    ]);\n    const upperStraightOne = straightExpression(\n        pointNewPosition,\n        upperFourthPoint\n    );\n    let fourthId;\n    if (inverse) {\n        fourthId = getNextId(thirdUpperPoint.id) - 1;\n    } else {\n        fourthId = getPrevId(thirdUpperPoint.id) - 1;\n    }\n    const fourthUpperPoint = state.pointsSet[fourthId];\n    const upperStraigthTwo = straightExpression(\n        thirdUpperPoint,\n        fourthUpperPoint\n    );\n    const newThirdPoint = new Point(\n        ...intersectionLines(upperStraightOne, upperStraigthTwo)\n    );\n    newThirdPoint.id = thirdUpperPoint.id;\n    shapeStore.dispatch(actionCreation.updatePoint(newThirdPoint));\n    return newThirdPoint;\n}\n\n/**\n *\n * @param {*} pointsSet\n */\nexport function validateParallelogram(pointsSet) {\n    const [p1, p2] = pointsSet;\n    let result = coefficient(p1, p2);\n    if (result === null) {\n        if (pointsSet[2].x === pointsSet[1].x) {\n            throw new Error(\"Point inside the line, click again\");\n        }\n    } else {\n        const termoConst = constantFunction(pointsSet[0].x, pointsSet[0].y, result);\n        if (pointsSet[2].y === result * pointsSet[2].x + termoConst) {\n            throw new Error(\"Point inside the line, click again\");\n        }\n    }\n}","import React from \"react\";\nimport Konva from \"konva\";\nimport { Circle } from \"react-konva\";\nimport * as shapeService from \"../services/shapeService\";\n\nconst PointCircle = ({\n  point,\n  radius,\n  draggable,\n  fill,\n  stroke,\n  index,\n  shadowBlur = 5,\n  shadowOpacity = 0.5,\n  shadowColor = \"black\"\n}) => {\n  const { x, y } = point;\n  let circleProperties = { x, y, radius };\n\n  if (index !== undefined) {\n    circleProperties.key = index;\n  }\n  if (typeof fill === \"string\") {\n    circleProperties.fill = fill;\n  }\n  if (typeof stroke === \"string\") {\n    circleProperties.stroke = stroke;\n  }\n  if (typeof draggable === \"boolean\" && draggable) {\n    const handleDragStart = event => {\n      event.target.setAttrs({\n        shadowOffset: {\n          x: 15,\n          y: 15\n        },\n        scaleX: 1.1,\n        scaleY: 1.1\n      });\n    };\n    const handleDragMove = event => {\n      const {\n        evt: { layerX: neoX, layerY: neoY }\n      } = event;\n\n      shapeService.updateParallelogram(neoX, neoY, point);\n    };\n    const handleDragEnd = event => {\n      //const { x: neoX, y: neoY } = event.target._lastPos;\n\n      event.target.to({\n        duration: 0.5,\n        easing: Konva.Easings.ElasticEaseOut,\n        scaleX: 1,\n        scaleY: 1,\n        shadowOffsetX: 5,\n        shadowOffsetY: 5\n      });\n    };\n    circleProperties = {\n      ...circleProperties,\n      draggable,\n      shadowBlur,\n      shadowOpacity,\n      shadowColor,\n      onDragStart: handleDragStart,\n      onDragEnd: handleDragEnd,\n      onDragMove: handleDragMove\n    };\n  }\n\n  return <Circle {...circleProperties} />;\n};\n\nexport default PointCircle;\n","import React, { useEffect } from \"react\";\nimport Parallelogram from \"../../components/Parallelogram\";\nimport PointCircle from \"../../components/PointCircle\";\nimport Point from \"../../model/Point\";\nimport actionCreation from \"../../actions/shapeAction\";\nimport {\n  drawCircumference,\n  generateParallelogram\n} from \"../../utils/shapeUtils\";\nimport { validateParallelogram } from \"../../services/shapeService\";\n\nlet DrawShapes = ({\n  points,\n  pointsSet,\n  circleCenter,\n  circleRadius,\n  dispatch\n}) => {\n  useEffect(() => {\n    if (pointsSet.length === 3) {\n      try {\n        validateParallelogram(pointsSet);\n      } catch (error) {\n        alert(error.message);\n      }\n      const [p4, pontoIntersecao] = generateParallelogram(pointsSet);\n      dispatch(actionCreation.insertPoint(p4));\n\n      dispatch(actionCreation.setCircleCenter(pontoIntersecao));\n\n      const { area, radius } = drawCircumference(\n        pointsSet[0],\n        p4,\n        pointsSet[1]\n      );\n      dispatch(actionCreation.setAreaRadius(area, radius));\n    }\n  }, [pointsSet.length]);\n  return (\n    <React.Fragment>\n      {pointsSet.map((point, index) => (\n        <PointCircle\n          point={point}\n          radius={11}\n          index={index}\n          draggable={true}\n          fill=\"red\"\n          updateCoords={point =>\n            dispatch.call(null, actionCreation.updatePoint(point))\n          }\n        />\n      ))}\n      <Parallelogram linePoints={points} />\n\n      {circleCenter instanceof Point && (\n        <PointCircle\n          point={circleCenter}\n          radius={circleRadius}\n          stroke=\"yellow\"\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default DrawShapes;\n","import React from \"react\";\nimport { Stage, Layer, Text } from \"react-konva\";\nimport { connect } from \"react-redux\";\nimport DrawShapes from \"./DrawShapes\";\nimport actionCreation from \"../../actions/shapeAction\";\n\nconst mapStateToProps = state => ({\n  count: state.count,\n  points: state.points,\n  pointsSet: state.pointsSet,\n  circleCenter: state.circleCenter,\n  circleRadius: state.circleRadius\n});\nlet Container = ({\n  dispatch,\n  count,\n  points,\n  pointsSet,\n  circleCenter,\n  circleRadius\n}) => {\n  const handleClick = event => {\n    dispatch(actionCreation.insertPoint(event.currentTarget.pointerPos));\n  };\n  const handleReset = () => dispatch(actionCreation.resetShapes());\n  /*\n  const {innerHeight, innerWidth} = window;\n  const [viewportWidth, setViewportWidth] = useState(innerWidth);\n  const [viewportHeight, setViewportHeight] = useState(innerHeight);\n  useEffect(() => {\n    setViewportHeight(innerHeight);\n    setViewportWidth(innerWidth);\n  }, [innerHeight, innerWidth]);\n  */\n  return (\n    <React.Fragment>\n      <button\n        className=\"shapes-btn\"\n        style={{ float: \"left\" }}\n        onClick={handleReset}\n      >\n        Reset Shapes\n      </button>\n      <Stage\n        width={window.innerWidth}\n        height={window.innerHeight}\n        onClick={handleClick}\n      >\n        <Layer>\n          <Text\n            text={`Please choose ${4 - count} ${\n              count < 3 ? \"points\" : \"point\"\n            } to draw a parallelogram`}\n            fontSize={15}\n            fill=\"white\"\n          />\n          <DrawShapes\n            {...{ points, pointsSet, circleCenter, circleRadius, dispatch }}\n          />\n        </Layer>\n      </Stage>\n    </React.Fragment>\n  );\n};\n\nContainer = connect(mapStateToProps)(Container);\nexport default Container;\n","import * as types from \"../constants/actionTypes\";\nimport Point from \"../model/Point\";\n\nexport const initialState = {\n  count: 0,\n  points: [],\n  pointsSet: [],\n  circleCenter: new Point,\n  circleRadius: 0,\n  parallelogramArea: 0\n};\n\n/**\n * \n * @param {object} state \n * @param {object} action\n * @returns {object} new state  \n */\nconst reducer = (state = initialState, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case types.CALCULATE_DIFFERENCES_BETWEEN_POINTS:\n      return;\n    case types.ADDING_POINT:\n      if (state.count < 4) {\n        const count = state.count + 1;\n        const point = new Point(payload.x, payload.y, count);\n        const neoPointSet = [...state.pointsSet, point];\n        return {\n          ...state,\n          count,\n          /** Avoid TypeError throwed by Object.values */\n          points: neoPointSet.flatMap(point => point && [point.x, point.y]),\n          pointsSet: neoPointSet\n        };\n      } else {\n        return state;\n      }\n      case types.UPDATING_POINT:\n        const {\n          newPoint: pointForUpdate\n        } = payload;\n        const pointSetUpdated = [];\n        const updatedCoord = [];\n        for (let index = 0; index < state.pointsSet.length; index++) {\n          const point = state.pointsSet[index];\n          if (index === pointForUpdate.id - 1) {\n            updatedCoord.push(pointForUpdate.x, pointForUpdate.y);\n            pointSetUpdated.push(pointForUpdate);\n          } else {\n            updatedCoord.push(point.x, point.y);\n            pointSetUpdated.push(point);\n          }\n        }\n        return {\n          ...state,\n          points: updatedCoord,\n            pointsSet: pointSetUpdated\n        };\n      case types.SET_CIRCLE_CENTER:\n        const point = new Point(payload.x, payload.y);\n        return {\n          ...state,\n          circleCenter: point\n        }\n        case types.SET_AREA_RADIUS:\n          const {\n            area, radius\n          } = payload;\n          return {\n            ...state,\n            circleRadius: radius,\n              parallelogramArea: area\n          }\n          case types.RESET_SHAPES:\n            return initialState;\n          default:\n            return state;\n  }\n};\n\nexport default reducer;","import React from \"react\";\nimport Konva from \"konva\";\nimport { Stage, Layer, Text, Circle, Line } from \"react-konva\";\n\nclass DrawParallelogram extends React.Component {\n  state = {\n    count: 0,\n    points: [],\n    pointsSet: [],\n    centro: {},\n    radius: 0\n  };\n\n  componentDidUpdate(prevProps, prevState) {\n    let result;\n    const { pointsSet } = this.state;\n    //console.log(\"pointset\", pointsSet);\n    if (this.state.count === 3) {\n      const [p1, p2] = this.state.pointsSet;\n      result = this.coefficient(p1, p2);\n      if (result === null) {\n        if (pointsSet[2].x === pointsSet[1].x) {\n          alert(\"Ponto dentro da reta, clique novamente\");\n          this.setState(prevState);\n        }\n      } else {\n        const termoConst = this.constantFunction(\n          pointsSet[0].x,\n          pointsSet[0].y,\n          result\n        );\n        if (pointsSet[2].y === result * pointsSet[2].x + termoConst) {\n          alert(\"Ponto dentro da reta, clique novamente\");\n          this.setState(prevState);\n        } else {\n          // inferir o 4º ponto atraves da projeção das retas paralelas\n          const [x4, y4] = this.generateFourthPoint(pointsSet);\n          //console.log(\"quarto ponto\", x4, y4);\n          const p4 = { x: x4, y: y4 };\n          this.setPoint(p4);\n          //encontrar o centro do paralelograma; cruzamento (interseção) das diagonais\n          // p1 -> p3 = diagonal 1\n          const d1 = this.straightExpression(pointsSet[0], pointsSet[2]);\n          // p2 -> p4 = diagonal 2\n          const d2 = this.straightExpression(pointsSet[1], p4);\n          // centro do paralelograma\n          const [x, y] = this.intersectionLines(d1, d2);\n          //console.log(\"x & y\", x, y);\n          this.setState(state => ({ ...state, centro: { x, y } }));\n\n          this.drawCircumference(pointsSet[0], p4, pointsSet[1]);\n        }\n        //TODO:\n      }\n    }\n  }\n\n  drawCircumference(p1, p2, p3, centro) {\n    console.log(\"circuferencia\", p1, p2, p3);\n    const { a, b } = this.straightExpression(p1, p2);\n    const [ap, bp] = this.perpendicularStraight(a, b, p3.x, p3.y);\n    const [x, y] = this.intersectionLines({ a, b }, { a: ap, b: bp });\n    const h = this.calculateDistanceBetweenPoints(p3, { x, y });\n    const base = this.calculateDistanceBetweenPoints(p1, p2);\n    const area = h * base;\n    const radius = Math.sqrt(area / Math.PI);\n    this.setState(state => ({ ...state, radius }));\n  }\n\n  calculateDistanceBetweenPoints(p1, p2) {\n    return Math.sqrt(Math.pow(p2.y - p1.y, 2) + Math.pow(p2.x - p1.x, 2));\n  }\n\n  perpendicularStraight(a, b, x, y) {\n    const coefAngular = -1 / a;\n    const constante = y + x / a;\n    return [coefAngular, constante];\n  }\n\n  intersectionLines(d1, d2) {\n    const x = (d2.b - d1.b) / (d1.a - d2.a);\n    const y = d1.a * x + d1.b;\n    return [x, y];\n  }\n\n  straightExpression(p1, p2) {\n    console.log(\"p1 & p2\", p1, p2);\n    const a = this.coefficient(p1, p2);\n    const b = this.constantFunction(p1.x, p1.y, a);\n    console.log(\"a & b\", a, b);\n    return { a, b };\n  }\n\n  generateFourthPoint([p1, p2, p3]) {\n    const x4 = p3.x - p2.x + p1.x;\n    const y4 = p3.y - p2.y + p1.y;\n    return [x4, y4];\n  }\n\n  constantFunction(x, y, c) {\n    return y - c * x;\n  }\n\n  coefficient(p1, p2) {\n    if (p1.x !== p2.x) {\n      return (p2.y - p1.y) / (p2.x - p1.x);\n    } else {\n      return null;\n    }\n    /*\n    if (p2.x > p1.x) {\n      return (p2.y - p1.y) / (p2.x - p1.x);\n    } else if (p1.x > p2.x) {\n      return (p1.y - p2.y) / (p1.x - p2.x);\n    } else {\n      throw new Error(\"ponto fora da reta\");\n    }\n    */\n  }\n\n  setPoint({ x, y }) {\n    if (this.state.count < 4)\n      this.setState(state => ({\n        count: state.count + 1,\n        points: [...state.points, ...[x, y]],\n        pointsSet: [...state.pointsSet, { x: x, y: y }]\n      }));\n  }\n\n  handleDragStart = e => {\n    e.target.setAttrs({\n      shadowOffset: {\n        x: 15,\n        y: 15\n      },\n      scaleX: 1.1,\n      scaleY: 1.1\n    });\n  };\n\n  handleDragEnd = e => {\n    e.target.to({\n      duration: 0.5,\n      easing: Konva.Easings.ElasticEaseOut,\n      scaleX: 1,\n      scaleY: 1,\n      shadowOffsetX: 5,\n      shadowOffsetY: 5\n    });\n  };\n\n  render() {\n    return (\n      <Stage\n        width={window.innerWidth}\n        height={window.innerHeight}\n        onClick={evt => this.setPoint(evt.currentTarget.pointerPos)}\n      >\n        <Layer>\n          <Text\n            text={`Coordenates: ${this.state.pointsSet\n              .map(\n                (p, i) =>\n                  ` P${i + 1} (x:${Number.parseInt(\n                    p.x,\n                    10\n                  )}, y:${Number.parseInt(p.y, 10)})`\n              )\n              .join(\"\")}`}\n            fontSize={15}\n            fill=\"white\"\n          />\n          {this.state.pointsSet.map((p, i) => (\n            <Circle\n              key={i}\n              x={p.x}\n              y={p.y}\n              radius={11}\n              draggable\n              shadowColor=\"black\"\n              shadowBlur={5}\n              shadowOpacity={0.5}\n              onDragStart={this.handleDragStart}\n              onDragEnd={this.handleDragEnd}\n              fill=\"red\"\n            />\n          ))}\n          <Line\n            onClick={() => console.log(\"clicked\")}\n            x={0}\n            y={0}\n            points={this.state.points}\n            closed\n            stroke=\"blue\"\n          />\n          {this.state.centro.x && (\n            <Circle\n              x={this.state.centro.x}\n              y={this.state.centro.y}\n              radius={this.state.radius}\n              stroke=\"yellow\"\n            />\n          )}\n        </Layer>\n      </Stage>\n    );\n  }\n}\n\nexport default DrawParallelogram;\n","import React from \"react\";\nimport Layout from \"./views/layout/Layout\";\nimport DisplayCoordirnates from \"./views/shapes/DisplayCoordirnates\";\nimport Container from \"./views/shapes/Container\";\nimport DrawParallelogram from \"./views/shapes/DrawParallelogram\";\nimport reducer from \"./reducers/shapeReducer\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nexport const store = createStore(reducer);\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Layout>\n        <DisplayCoordirnates />\n        <Container />\n      </Layout>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}